// Generated by CoffeeScript 1.8.0
(function() {
  var KindaiCropper, Line;

  Line = (function() {
    function Line(gradient, intercept) {
      this.gradient = gradient;
      this.intercept = intercept;
    }

    return Line;

  })();

  KindaiCropper = (function() {
    function KindaiCropper(image) {
      this.canvas = document.createElement('canvas');
      this.canvas.width = image.width;
      this.canvas.height = image.height;
      this.ctx = this.canvas.getContext('2d');
      this.width = this.canvas.width;
      this.height = this.canvas.height;
      this.ctx.drawImage(image, 0, 0);
      this.grayscale();
      this;
    }

    KindaiCropper.prototype.grayscale = function() {
      var b, d, data, g, i, r, _i, _len, _results;
      data = this.ctx.getImageData(0, 0, this.width, this.height).data;
      this.gray = [];
      _results = [];
      for (i = _i = 0, _len = data.length; _i < _len; i = _i += 4) {
        d = data[i];
        r = data[i];
        g = data[i + 1];
        b = data[i + 2];
        _results.push(this.gray[i / 4] = Math.ceil(0.2126 * r + 0.7152 * g + 0.0722 * b));
      }
      return _results;
    };

    KindaiCropper.prototype.getPixel = function(x, y) {
      return this.gray[y * this.width + x];
    };

    KindaiCropper.prototype.verticalLine = function(x) {
      var y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = this.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.getPixel(x, y));
      }
      return _results;
    };

    KindaiCropper.prototype.horizontalLine = function(y) {
      var x, _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = this.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.getPixel(x, y));
      }
      return _results;
    };

    KindaiCropper.prototype.findEdge = function(line, threshold, reverse) {
      var d, i, _i, _len;
      if (reverse == null) {
        reverse = false;
      }
      if (reverse) {
        line = line.reverse();
      }
      for (i = _i = 0, _len = line.length; _i < _len; i = ++_i) {
        d = line[i];
        if (i < line.length * 0.03 || i > line.length * 0.97) {
          continue;
        }
        if (Math.abs(line[i + 5] - line[i]) > threshold) {
          if (reverse) {
            return line.length - i - 1;
          } else {
            return i;
          }
        }
      }
      return null;
    };

    KindaiCropper.prototype.crop = function() {
      var d, edges, height, lt, rt, width, _i, _len, _ref;
      edges = this.sampleEdgePoints();
      _ref = ["top", "left", "right", "bottom"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        if (d === "top" || d === "bottom") {
          edges[d] = this.removeOutliersY(edges[d]);
        }
        if (d === "left" || d === "right") {
          edges[d] = this.removeOutliersX(edges[d]);
        }
        edges[d] = this.orthogonalRegression(edges[d]);
      }
      lt = this.intersection(edges["top"], edges["left"]);
      rt = this.intersection(edges["bottom"], edges["right"]);
      width = rt[0] - lt[0];
      height = rt[1] - lt[1];
      return {
        left: [lt[0], lt[1], Math.ceil(width / 2), height],
        right: [Math.ceil((lt[0] + rt[0]) / 2), lt[1], Math.ceil(width / 2), height]
      };
    };

    KindaiCropper.prototype.intersection = function(line1, line2) {
      var a, b, c, d, x, y;
      a = line1.gradient;
      b = line1.intercept;
      c = line2.gradient;
      d = line2.intercept;
      x = (b - d) / (c - a);
      y = a * x + b;
      return [Math.ceil(x), Math.ceil(y)];
    };

    KindaiCropper.prototype.sampleEdgePoints = function(threshold, span, margin) {
      var bottom, hLines, i, left, line, right, top, vLines, x, y;
      if (threshold == null) {
        threshold = 8;
      }
      if (span == null) {
        span = 5;
      }
      if (margin == null) {
        margin = 5;
      }
      vLines = (function() {
        var _i, _ref, _results;
        _results = [];
        for (x = _i = 0, _ref = this.width - 1; span > 0 ? _i <= _ref : _i >= _ref; x = _i += span) {
          _results.push(this.verticalLine(x));
        }
        return _results;
      }).call(this);
      hLines = (function() {
        var _i, _ref, _results;
        _results = [];
        for (y = _i = 0, _ref = this.height - 1; span > 0 ? _i <= _ref : _i >= _ref; y = _i += span) {
          _results.push(this.horizontalLine(y));
        }
        return _results;
      }).call(this);
      top = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = vLines.length; _i < _len; _i++) {
          line = vLines[_i];
          _results.push(this.findEdge(line, threshold));
        }
        return _results;
      }).call(this);
      bottom = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = vLines.length; _i < _len; _i++) {
          line = vLines[_i];
          _results.push(this.findEdge(line, threshold, true));
        }
        return _results;
      }).call(this);
      left = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = hLines.length; _i < _len; _i++) {
          line = hLines[_i];
          _results.push(this.findEdge(line, threshold));
        }
        return _results;
      }).call(this);
      right = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = hLines.length; _i < _len; _i++) {
          line = hLines[_i];
          _results.push(this.findEdge(line, threshold, true));
        }
        return _results;
      }).call(this);
      return {
        top: (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = top.length; _i < _len; i = ++_i) {
            y = top[i];
            if (y && y < this.height * 0.3) {
              _results.push([i * span, y]);
            }
          }
          return _results;
        }).call(this),
        bottom: (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = bottom.length; _i < _len; i = ++_i) {
            y = bottom[i];
            if (y && y > this.height * 0.7) {
              _results.push([i * span, y]);
            }
          }
          return _results;
        }).call(this),
        left: (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = left.length; _i < _len; i = ++_i) {
            x = left[i];
            if (x && x < this.width * 0.3) {
              _results.push([x, i * span]);
            }
          }
          return _results;
        }).call(this),
        right: (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = right.length; _i < _len; i = ++_i) {
            x = right[i];
            if (x && x > this.width * 0.7) {
              _results.push([x, i * span]);
            }
          }
          return _results;
        }).call(this)
      };
    };

    KindaiCropper.prototype.removeOutliersX = function(samples) {
      var deviation, meanX, n, result, s, sample, variance, xSeq, xi, _i, _len;
      samples = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = samples.length; _i < _len; _i++) {
          s = samples[_i];
          if ((s[0] != null) && (s[1] != null)) {
            _results.push(s);
          }
        }
        return _results;
      })();
      n = samples.length;
      xSeq = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = samples.length; _i < _len; _i++) {
          sample = samples[_i];
          _results.push(sample[0]);
        }
        return _results;
      })();
      meanX = (xSeq.reduce(function(a, b) {
        return a + b;
      })) / n;
      variance = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = xSeq.length; _i < _len; _i++) {
          xi = xSeq[_i];
          _results.push((xi - meanX) * (xi - meanX) / n);
        }
        return _results;
      })()).reduce(function(a, b) {
        return a + b;
      });
      deviation = Math.sqrt(variance);
      result = [];
      for (_i = 0, _len = samples.length; _i < _len; _i++) {
        s = samples[_i];
        if (!(s[0] < meanX - 2 * deviation || s[0] > meanX + 2 * deviation)) {
          result.push(s);
        }
      }
      return result;
    };

    KindaiCropper.prototype.removeOutliersY = function(samples) {
      var deviation, meanY, n, result, s, sample, variance, ySeq, yi, _i, _len;
      samples = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = samples.length; _i < _len; _i++) {
          s = samples[_i];
          if ((s[0] != null) && (s[1] != null)) {
            _results.push(s);
          }
        }
        return _results;
      })();
      n = samples.length;
      ySeq = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = samples.length; _i < _len; _i++) {
          sample = samples[_i];
          _results.push(sample[1]);
        }
        return _results;
      })();
      meanY = (ySeq.reduce(function(a, b) {
        return a + b;
      })) / n;
      variance = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = ySeq.length; _i < _len; _i++) {
          yi = ySeq[_i];
          _results.push((yi - meanY) * (yi - meanY) / n);
        }
        return _results;
      })()).reduce(function(a, b) {
        return a + b;
      });
      deviation = Math.sqrt(variance);
      result = [];
      for (_i = 0, _len = samples.length; _i < _len; _i++) {
        s = samples[_i];
        if (!(s[1] < meanY - 2 * deviation || s[1] > meanY + 2 * deviation)) {
          result.push(s);
        }
      }
      return result;
    };

    KindaiCropper.prototype.orthogonalRegression = function(samples) {
      var dscr, gradient, meanX, meanY, n, result, s, sample, sxx, sxy, syy, xSeq, xi, xy, ySeq, yi;
      samples = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = samples.length; _i < _len; _i++) {
          s = samples[_i];
          if ((s[0] != null) && (s[1] != null)) {
            _results.push(s);
          }
        }
        return _results;
      })();
      n = samples.length;
      xSeq = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = samples.length; _i < _len; _i++) {
          sample = samples[_i];
          _results.push(sample[0]);
        }
        return _results;
      })();
      ySeq = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = samples.length; _i < _len; _i++) {
          sample = samples[_i];
          _results.push(sample[1]);
        }
        return _results;
      })();
      meanX = (xSeq.reduce(function(a, b) {
        return a + b;
      })) / n;
      meanY = (ySeq.reduce(function(a, b) {
        return a + b;
      })) / n;
      sxx = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = xSeq.length; _i < _len; _i++) {
          xi = xSeq[_i];
          _results.push((xi - meanX) * (xi - meanX) / n);
        }
        return _results;
      })()).reduce(function(a, b) {
        return a + b;
      });
      syy = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = ySeq.length; _i < _len; _i++) {
          yi = ySeq[_i];
          _results.push((yi - meanY) * (yi - meanY) / n);
        }
        return _results;
      })()).reduce(function(a, b) {
        return a + b;
      });
      sxy = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = samples.length; _i < _len; _i++) {
          xy = samples[_i];
          _results.push((xy[0] - meanX) * (xy[1] - meanY) / n);
        }
        return _results;
      })()).reduce(function(a, b) {
        return a + b;
      });
      dscr = (sxx - syy) * (sxx - syy) + 4 * sxy * sxy;
      if (sxy !== 0) {
        gradient = (syy - sxx + Math.sqrt(dscr)) / (2 * sxy);
        result = {
          gradient: gradient,
          intercept: meanY - gradient * meanX
        };
      } else {
        if (sxx > syy) {
          result = {
            gradient: 0,
            intercept: meanY
          };
        } else {
          result = {
            gradient: Infinity,
            intercept: 0
          };
        }
      }
      return result;
    };

    return KindaiCropper;

  })();

  window.KindaiCropper = KindaiCropper;

}).call(this);
